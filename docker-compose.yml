version: '3'
networks:
  my_network:
    driver: bridge
services:
  postgres:
    image: postgres:16
    container_name: postgres
    restart: always # | unless-stopped
    ports:
      - "5434:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - my_network
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
      POSTGRES_DB: init_db
      POSTGRES_MAX_CONNECTIONS: 500  # increase connection limit to 500.
#    env_file:
#      - ./postgres.env
  # Spring Boot Application Service
  dev-auth:
    build:
      context: ../Dev-Takeaway/backend/dev-auth  # Build from the current directory (where the Dockerfile is located)
    container_name: dev-auth
    restart: always  # Restart policy for the application
    ports:
      - "8088:8080"  # Map container port 8080 to host port 8088 for accessing the app
    volumes:
      - ./logs:/app/logs  # Mounting the logs directory (optional)
    networks:
      - my_network
    env_file:
      - ./dev-auth/dev-auth.env
    depends_on:
      - postgres
#    environment:
##      SPRING_PROFILES_ACTIVE: "prod"  # Optional: Set active profile for Spring Boot (e.g., dev, prod)
#      DATABASE_URL: jdbc:postgresql://postgres:5432/dev_auth
#      POSTGRES_USER: postgres
#      POSTGRES_PASSWORD: root

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: always
    ports:
      - '5050:80'
    depends_on:
      - postgres
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - my_network
    environment:
      PGADMIN_DEFAULT_EMAIL: dot@pg.com
      PGADMIN_DEFAULT_PASSWORD: dot
#    env_file:
#      - ./pgadmin.env

  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: rabbitmq
    restart: always
    ports:
      - '5673:5672'   # Web UI
      - '15673:15672' # AMQP protocol
#    env_file:
#      - ./rabbit.env
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - my_network
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.14.0
    container_name: elasticsearch
    restart: always
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9201:9200"
      - "9301:9300"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    networks:
      - my_network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.14.0
    container_name: kibana
    restart: always
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - xpack.security.enabled=false
    volumes:
      - kibana_data:/usr/share/kibana/data
    networks:
      - my_network

  mongo:
    image: mongo:latest
    container_name: mongo
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - my_network
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password

  mongo-express:
    image: mongo-express
    container_name: mongo_express
    restart: always
    depends_on:
      - mongo
    ports:
      - "8081:8081"
    networks:
      - my_network
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
      ME_CONFIG_MONGODB_SERVER: mongo

  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - my_network

  grafana:
    image: grafana/grafana
    ports:
      - "3001:3000"
    networks:
      - my_network
    depends_on:
      - prometheus

  nginx:
    image: nginx
    container_name: my-nginx
    ports:
      - "8080:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf  # Custom NGINX config
      - ./html:/usr/share/nginx/html        # Serve custom HTML files

  jenkins:
    image: jenkins/jenkins:lts
    container_name: jenkins
    restart: always
    privileged: true
    user: root
    ports:
      - "8082:8080"  # Jenkins UI
      - "50000:50000" # Agent communication
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock # Allow Jenkins to use Docker
    networks:
      - my_network

  nexus:
    image: sonatype/nexus3
    container_name: nexus
    restart: always
    ports:
      - "8081:8081"  # Nexus UI
      - "8082:8082"  # Repository Port
    volumes:
      - nexus_data:/nexus-data
    networks:
      - my_network
    environment:
      - INSTALL4J_ADD_VM_PARAMS=-Xms512m -Xmx1024m -XX:MaxDirectMemorySize=1024m -Djava.util.prefs.userRoot=/nexus-data/javaprefs
      - NEXUS_SECURITY_RANDOMPASSWORD=false  # Disables random admin password, default: admin/admin123


volumes:
  pg_data:
  pgadmin_data:
  rabbitmq_data:
  es_data:
  kibana_data:
  mongo_data:
  jenkins_home:
  nexus_data:

