version: '3'
networks:
  my_network:
    driver: bridge
services:

  postgres:
    image: postgres:16
    container_name: postgres
    restart: always # | unless-stopped
    ports:
      - "5432:5432"
#    entrypoint: ["sleep", "3600"]   # disables Postgres startup
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - my_network
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
#      POSTGRES_DB: init_db
      POSTGRES_MAX_CONNECTIONS: 5000  # increase connection limit to 500.
    env_file:
      - ./postgres.env

#  elasticsearch:
#    image: docker.elastic.co/elasticsearch/elasticsearch:8.14.0
#    container_name: elasticsearch
#    restart: always
#    environment:
#      - discovery.type=single-node
#      - xpack.security.enabled=false
#      - xpack.ml.enabled=false
#      - xpack.monitoring.collection.enabled=false
#      - ES_JAVA_OPTS=-Xms1g -Xmx1g
#    ports:
#      - "9200:9200"
#      - "9300:9300"
#    volumes:
#      - es_data:/usr/share/elasticsearch/data
#    networks:
#      - my_network
#    deploy:
#      resources:
#        limits:
#          cpus: '2.0'
#          memory: 2g
#        reservations:
#          memory: 1g

#  kibana:
#    image: docker.elastic.co/kibana/kibana:8.14.0
#    container_name: kibana
#    restart: always
#    ports:
#      - "5601:5601"
#    depends_on:
#      - elasticsearch
#    environment:
#      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
#      - xpack.security.enabled=false
#      - NODE_OPTIONS=--max-old-space-size=512   # limit Node.js memory usage
#    volumes:
#      - kibana_data:/usr/share/kibana/data
#    networks:
#      - my_network
#    deploy:
#      resources:
#        limits:
#          cpus: '1.0'
#          memory: 1g

  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: rabbitmq
    restart: always
    ports:
      - '5672:5672'   # Web UI
      - '15672:15672' # AMQP protocol
    #    env_file:
    #      - ./rabbit.env
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - my_network
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest

#  redis:
#    image: redis:7.2-alpine # Specifies the Redis Docker image to use
#    container_name: redis # Sets a custom name for the container
#    restart: always # Ensures the container restarts automatically if it stops
#    ports:
#      - "6379:6379" # default Redis port, maps port 6379 on the host to port 6379 in the container
#    networks:
#      - my_network
#    command: redis-server --appendonly yes
#    # `--appendonly yes` enables persistence (AOF mode) so data survives container restarts.
#    volumes:
#      - redis_data:/data # Mounts a named volume for data persistence

#  jenkins:
#    image: jenkins/jenkins:lts
#    container_name: jenkins
#    restart: always
#    # privileged: true
#    user: root
#    ports:
#      - "8090:8080"  # Jenkins UI
#      - "50000:50000" # Agent communication
#    volumes:
#      - jenkins_home:/var/jenkins_home
#      # - /var/run/docker.sock:/var/run/docker.sock # Allow Jenkins to use Docker
#    networks:
#      - my_network
#
#  nexus:
#    image: sonatype/nexus3
#    container_name: nexus
#    restart: always
#    ports:
#      - "8081:8081"  # Nexus UI
#      - "8082:8082"  # Repository Port
#      - "5000:5000"
#    volumes:
#      - nexus_data:/nexus-data
#    networks:
#      - my_network
#    environment:
#      - INSTALL4J_ADD_VM_PARAMS=-Xms512m -Xmx1024m -XX:MaxDirectMemorySize=1024m -Djava.util.prefs.userRoot=/nexus-data/javaprefs
#      - NEXUS_SECURITY_RANDOMPASSWORD=false  # Disables random admin password, default: admin/admin123

#  redis:
#    image: redis:7.2-alpine # Specifies the Redis Docker image to use
#    container_name: redis # Sets a custom name for the container
#    restart: always # Ensures the container restarts automatically if it stops
#    ports:
#      - "6379:6379" # default Redis port, maps port 6379 on the host to port 6379 in the container
#    networks:
#      - my_network
#    command: redis-server --appendonly yes
#    # `--appendonly yes` enables persistence (AOF mode) so data survives container restarts.
#    volumes:
#      - redis_data:/data # Mounts a named volume for data persistence
#
#  keycloak:
#    image: quay.io/keycloak/keycloak:25.0.6   # latest stable as of Aug 2025
#    container_name: keycloak
#    command: start-dev --http-port=8080
#    environment:
#      KEYCLOAK_ADMIN: admin         # Admin username
#      KEYCLOAK_ADMIN_PASSWORD: admin  # Admin password
#    ports:
#      - "8080:8080"
#    volumes:
#      - keycloak_data:/opt/keycloak/data

#  zookeeper:
#    image: confluentinc/cp-zookeeper:7.2.1
#    container_name: zookeeper
#    restart: always
#    environment:
#      ZOOKEEPER_CLIENT_PORT: 2181
#      ZOOKEEPER_TICK_TIME: 2000
#    ports:
#      - "2181:2181"
#    volumes:
#      - zookeeper_data:/var/lib/zookeeper
#    networks:
#      - my_network
#
#  kafka:
#    image: confluentinc/cp-kafka:7.2.1  # Use ZooKeeper-compatible version
#    container_name: kafka
#    restart: always
#    depends_on:
#      - zookeeper
#    environment:
#      KAFKA_BROKER_ID: 1
#      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:9093
#      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_INTERNAL://0.0.0.0:9093
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
#      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#    ports:
#      - "9092:9092"
#    volumes:
#      - kafka_data:/var/lib/kafka/data
#    networks:
#      - my_network
#
#  kafka-ui:
#    image: provectuslabs/kafka-ui:latest
#    container_name: kafka-ui
#    restart: always
#    ports:
#      - "8085:8080"  # Access at http://localhost:8085
#    environment:
#      - KAFKA_CLUSTERS_0_NAME=local-kafka
#      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9093
#      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
#    depends_on:
#      - kafka
#      - zookeeper
#    networks:
#      - my_network

# Spring Boot Application Service
  dev-auth-server:
    build:
      context: ../dev-microservices-lab/backend/dev-auth-server  # Build from the current directory (where the Dockerfile is located)
      dockerfile: Dockerfile            # <- This is optional if named Dockerfile
    image: dev-auth-server:latest              # <- Tag image after build
    container_name: dev-auth
    restart: always  # Restart policy for the application
    ports:
      - "8000:8000"  # Map container port 8080 to host port 8088 for accessing the app
    volumes:
      - ./logs:/app/logs  # Mounting the logs directory (optional)
      - ./newrelic:/newrelic
    networks:
      - my_network
    env_file:
      - ./dev-auth/dev-auth.env
    depends_on:
      - postgres
      - rabbitmq
    environment:
     - DATABASE_URL=jdbc:postgresql://postgres:5432/dev_auth_server
     - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/dev_auth_server
     - POSTGRES_USER=postgres
     - POSTGRES_PASSWORD=root
     - RABBIT_URL=rabbitmq:15672
     - SPRING_RABBITMQ_HOST=rabbitmq
     - JAVA_TOOL_OPTIONS=-javaagent:/newrelic/newrelic.jar
     - NEW_RELIC_APP_NAME=service-a
     - NEW_RELIC_LICENSE_KEY=${licence_key}


  # Spring Boot Application Service
#  http-adapter:
#     build:
#       context: ../../../mdo/repo/mdo-http-adapter  # Build from the current directory (where the Dockerfile is located)
#       dockerfile: Dockerfile            # <- This is optional if named Dockerfile
#     image: http-adapter:latest              # <- Tag image after build
#     container_name: http-adapter
#     restart: always  # Restart policy for the application
#     ports:
#       - "8088:8082"  # Map container port 8080 to host port 8088 for accessing the app
#     networks:
#       - my_network
#     env_file:
#       - ./dev-auth/dev-auth.env
#       - ./rabbitmq.env
#       - ./data-enrichment.env   # add this new file
#     depends_on:
#       - postgres
#       - rabbitmq
#     environment:
#       - DATABASE_URL=jdbc:postgresql://postgres:5432/http_adapter
#       - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/http_adapter
#       - POSTGRES_USER=postgres
#       - POSTGRES_PASSWORD=root
#       - RABBIT_URL=rabbitmq:15672
#       - SPRING_RABBITMQ_HOST=rabbitmq

#  pgadmin:
#    image: dpage/pgadmin4
#    container_name: pgadmin
#    restart: always
#    ports:
#      - '5050:80'
#    depends_on:
#      - postgres
#    volumes:
#      - pgadmin_data:/var/lib/pgadmin
#    networks:
#      - my_network
#    environment:
#      PGADMIN_DEFAULT_EMAIL: dot@pg.com
#      PGADMIN_DEFAULT_PASSWORD: dot
#    env_file:
#      - ./pgadmin.env

#  mongo:
#    image: mongo:latest
#    container_name: mongo
#    restart: always
#    ports:
#      - "27017:27017"
#    volumes:
#      - mongo_data:/data/db
#    networks:
#      - my_network
#    environment:
#      MONGO_INITDB_ROOT_USERNAME: admin
#      MONGO_INITDB_ROOT_PASSWORD: password

#  mongo-express:
#    image: mongo-express
#    container_name: mongo_express
#    restart: always
#    depends_on:
#      - mongo
#    ports:
#      - "8070:8081"
#    networks:
#      - my_network
#    environment:
#      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
#      ME_CONFIG_MONGODB_ADMINPASSWORD: password
#      ME_CONFIG_MONGODB_SERVER: mongo

#  nginx:
#    image: nginx
#    container_name: my-nginx
#    ports:
#      - "8080:80"
#    volumes:
#      - ./nginx.conf:/etc/nginx/nginx.conf  # Custom NGINX configc
#      - ./html:/usr/share/nginx/html        # Serve custom HTML files

#  prometheus:
#    image: prom/prometheus:latest
#    container_name: prometheus
#    volumes:
#      - prometheus_data:/prometheus
#      - ./prometheus.yml:/etc/prometheus/prometheus.yml
#    ports:
#      - "9090:9090"
#    command:
#      - "--config.file=/etc/prometheus/prometheus.yml"
#    restart: unless-stopped
#    networks:
#      - my_network

#  grafana:
#    image: grafana/grafana:latest
#    container_name: grafana
#    ports:
#      - "3001:3000"
#    environment:
#      - GF_SECURITY_ADMIN_USER=admin
#      - GF_SECURITY_ADMIN_PASSWORD=admin
#    volumes:
#      - grafana_data:/var/lib/grafana
#    restart: unless-stopped
#    networks:
#      - my_network
#
#
#  node-exporter:
#    image: prom/node-exporter:latest
#    container_name: node-exporter
#    ports:
#      - "9100:9100"
#    restart: unless-stopped
#    networks:
#      - my_network

volumes:
  pg_data:
  rabbitmq_data:
  newrelic:
#  redis_data:
#  nexus_data:
#  keycloak_data:
#  es_data:
#  kibana_data:
#  zookeeper_data:
#  kafka_data:
#  pgadmin_data:
#  mongo_data:
#  prometheus_data:  # Volume for Prometheus metrics storage
#  grafana_data:  # Volume for Grafana dashboards & config

